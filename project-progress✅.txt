# boundaries:
1. you are not making this app/website to scalable approach. cause you are working with monolisthic(i don't know the spelling) architechture. which you find out lately, and another architecture is micro-services. but it's not that much high end project. so i don't go to first learn and then excute or shift to that one.

I AM NOT INCLUDING THESE FUNCIIONALITIES
 
2. negative ones: you are not keeping the record of message sending and receiving stages.
eg: user A sending the message to user B. so
Stage 0: user A's message is sending to the server - clock icon‚åö 
Stage 1: user A's message successfully receives on server - single tick‚úîÔ∏è
Stage 2: server send that message to user B successfully - double tick‚úîÔ∏è‚úîÔ∏è
Stage 3: user B seen the message - blue tick‚úÖ

## TIPS:
1. don't be perfect, you can't clone the fully WhatsApp/insta. there are always something which will bother you.
2. you are making your first full stack project from scratch. so yes, you should not focus on perfection, end-result or what will you get or how much you paidoff instead you should focus on learning, read docs for hours, find and fix the bugs by your own which bothers you.
3. it might take 1 month to fininsh. but that 1 month will worth it, when you become confident on your skills.
4. 


1. configEnv/index.js ‚úÖ
2. db/connectDb.js ‚úÖ
3. utils/apiError.util.js ‚úÖ
4. utils/apiResponse.util.js ‚úÖ
5. utils/asyncHandler.util.js ‚úÖ
6. models/user.model.js ‚úÖ
7. routes/user.route.js ‚úÖ
8. middlewares/multer.middleware.js ‚úÖ
9. middlewares/auth.middleware.js ‚úÖ
10. utils/cloudinary.util.js ‚úÖ
11. controller/user.controller.js = almost complete
	registerUser ‚úÖ
	loginUser ‚úÖ
	logoutUser ‚úÖ
	generateNewAccessToken ‚úÖ

12. init the Client folder ‚úÖ
13. init the vite react application ‚úÖ
14. init shadcn ‚úÖ
15. setup routing ‚úÖ
16. config react-hot-toast ‚úÖ
17. @reduxjs/toolkit, react-redux configuration - 50%
18. controller/user.controller.js = add more things
	getAllUsers ‚úÖ
	changeCurrentPassword ‚ùì but not test yet.

19. create new model
	message.model.js ‚úÖ
	chat.model.js ‚úÖ

20. create new routes
	message.route.js ‚úÖ
	chat.route.js ‚úÖ

21. add these routes endpoints in app.js - updation -  ‚úÖ
22. add new file - .env-sample ‚úÖ
23. slice of change in README.md ‚úÖ
24. create new controllers for respective routes, and models
	message.controller.js ‚úÖ
	chat.controller.js ‚úÖ

25. controllers/message.controller.js
	sendMessage ‚úÖ
	fetchAllMessages ‚úÖ

26. controllers/chat.controller.js
	accessChat ‚úÖ
	fetchChat ‚úÖ
	createGroupChat ‚úÖ
	renameGroupChat ‚úÖ
	addToGroupChat ‚úÖ
	removeFromGroupChat ‚úÖ

-> Client/src
27. pages
	LoginPage.jsx ‚úÖ
	RegisterPage.jsx ‚úÖ
	HomePage.jsx ‚úÖ

28. elements
	Loader.jsx ‚úÖ
	Login.jsx ‚úÖ
	Register.jsx ‚úÖ

-> things which are not completed, you are working on them

Client/src/elements
29. elements
	ChatPanel.jsx ‚öíÔ∏è
	Sidebar.jsx ‚öíÔ∏è
	Header.jsx ‚öíÔ∏è
	logout.jsx ‚öíÔ∏è

30. pages
	HomePage.jsx ‚öíÔ∏è

31. Client/src/ -> Folder -> Redux/Context & Utils - TIME CONSUMING & CONFUSING - CURRENTLY  ‚öíÔ∏è ‚öíÔ∏è

32. new file creation in Commit folder - 04commit.txtüòé

33. README.md updation: 
	COMMENTS-MODEL
	VISIT THESE LINES

34. Install & Config chakra ui but not use init

35. Tweak and Tune the elements on Client folder:
	ChatPanel
	Register
	Login
	Sidebar
	HomePage

36. create new elements:
	Profile
	ImageCropper

37. Tweak .gitignore to ignore & not push the .evn-original file on github

38. Create new folder "configInventory" and push an image which tells about the userName, fullName conventions while registeration.

39. init constants.js file in the server.
	init an object which holds all the key value pairs.
	object-name: constantValues

40. add new cloudinary util to handle the deletion part from cloudinary.
	method-name: deleteFromCloudinary

40. Tweak the user.controller.js file to handle all user related operations more gracefully.
	add new imports: fs module, constantValues, deleteFromCloudinary, error module of node
	focus-on: make the error handling more smooth and understandable.
	focus-on: explaining each block of code into consumable chunks like an algorithm through comments.
	focus-on: explore, find & fix more edge cases in the code.
	focus-on: make our code more efficient, concise without losing the readability
	focus-on: handle the avatar CRUD operations on the cloudinary, DB, & server.
	foucs-on: to make my application more flexible so i was set the avatar requirement to optional.
	add-new-field: i add new field in user document "about".
	talk-about: i also add a default-avatar but not through the mongoose. instead i use that placeholder-image into my constantValues. i use mongoose error-validators to throw errors when 
	why-i-don't-use: mongoose doesn't do it's job in the right manner.
		1. when user doesn't provide an avatar so it's set that field blank, instead it must use the placeholder avatar.
		2. it's does not stopping & even not showing that custom messages if user doesn't provide a required field. then, i read docs & i use mongoose to throw error on the fronted side. but he is not preventing user to create an account and as result "user creates his account which is empty sometimes".
		3. so i need to write custom validators to check whether user provides me all necessary details to create an account.

41. new file creation in Commit folder - 05commit.txtüòé