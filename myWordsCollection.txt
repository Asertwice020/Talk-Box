
PLAIN-TEXT:

LOWERCASE:
pages folder home search cart lazy import create routes using react-router-dom use suspense from react just like suspense used to show something while your data is fetching loader skelon loading syntax of wrap all your routes under tag create a don't be hasty dashboard by copy & paste do it watching your self header component use sementic tag nav import link fasearch fashoppingbag from "react-router-dom" "react-icons/fa" you can also navlink after spending 2 mins read docs chat-app backend controllers chatcontroller.js usercontroller.js models chat.js user.js views frontend assets chatcontroller.js usercontroller.js components chatmodel.js usermodel.js pages chatview.js userview.js services api.js index.js .gitignore i am looking for that kind of structure which gives me these functionalities can handle all my secrets from 1 env file should be on the root level project on also define my prettier so my apply both code fronted server want 2 folders client maintain it easily and best practise to add -d tailwindcss postcss autoprefixer dlx init -p public temp my-dp jpeg 1713770553755 426950296 apierror deep dive below throw new message something went wrong while registering the user user.controller.js registeruser stack tip tip third party services cloudinary database case running but db unable talk multer uploading some files multer not responding status code service unavailable third party service rely currently down bad request client gives wrong unwanted data requests forbidden server understands request made client refuses authorize it not acceptable happens can't provide what requested format wanted like html vs json server db index.js how to connect to creating function contain connection logic it's an async uses try-catch handling errors await connection configenv load with validation before app going start dotenv create methods one validating type second call loaded ask things varname expectedtype extract value value constant value undefined convertedvaluetype throw trim if convertedvaluetype throw convertedvaluetype unreachable log process exit console for type value convertedvaluetype while connecting mongodb log errorobj errorobj while connecting mongodb configenv value type configenv configenv it's overkill not much effective use it validation all fields required username email password some field optonal unlinking unlink user details from full request object fullrequestobject fullrequestbody fullrequestparams fullqueryparams logginguserschemadetails userschema userschema methods initializetimestampsmethod console requestobj fullrequestobject fullrequestbody fullrequestparams fullqueryparams console exacerbate validation things all fields required field trim username email password apierror login user collect details req body username email password refreshtoken accesstoken validation find user account redirect flash message notify send access refresh tokens user secure cookies redirect homepage flash message challenges folder structure public temp store avatar cover images videos maybe temporary basis uplaaidng them db to handle private prettier npm manager efficiently download node modules each time project store links new same concept redux does state management connect db iife import mongoose config dbname async connect process app error issue configenv method validate expectedtype value string before user secret methods necessary extract generated spdx-license-identifier sumit saraswat permission hereby granted person obtaining copy software associated documentation files deal without restriction including without limitation rights use copy modify merge publish distribute sublicense furnish subject following conditions copyright notice permission included substantial portions provided the without warranty express implied kind including but limited warranties merchantability fitness particular purpose noninfringement shall liable claim damages liability whether action contract tort arising connection with shall included

CAPITALIZED:
Pages Folder Home Search Cart Lazy Import Create Routes Using React-Router-Dom Use Suspense From React Just Like Suspense Used To Show Something While Your Data Is Fetching Loader Skelon Loading Syntax Of Wrap All Your Routes Under Tag Create A Don't Be Hasty Dashboard By Copy & Paste Do It Watching Your Self Header Component Use Sementic Tag Nav Import Link Fasearch Fashoppingbag From "React-Router-Dom" "React-Icons/Fa" You Can Also Navlink After Spending 2 Mins Read Docs Chat-App Backend Controllers Chatcontroller.Js Usercontroller.Js Models Chat.Js User.Js Views Frontend Assets Chatcontroller.Js Usercontroller.Js Components Chatmodel.Js Usermodel.Js Pages Chatview.Js Userview.Js Services Api.Js Index.Js .Gitignore I Am Looking For That Kind Of Structure Which Gives Me These Functionalities Can Handle All My Secrets From 1 Env File Should Be On The Root Level Project On Also Define My Prettier So My Apply Both Code Fronted Server Want 2 Folders Client Maintain It Easily And Best Practise To Add -D Tailwindcss Postcss Autoprefixer Dlx Init -P Public Temp My-Dp Jpeg 1713770553755 426950296 Apierror Deep Dive Below Throw New Message Something Went Wrong While Registering The User User.Controller.Js Registeruser Stack Tip Tip Third Party Services Cloudinary Database Case Running But Db Unable Talk Multer Uploading Some Files Multer Not Responding Status Code Service Unavailable Third Party Service Rely Currently Down Bad Request Client Gives Wrong Unwanted Data Requests Forbidden Server Understands Request Made Client Refuses Authorize It Not Acceptable Happens Can't Provide What Requested Format Wanted Like Html Vs Json Server Db Index.Js How To Connect To Creating Function Contain Connection Logic It's An Async Uses Try-Catch Handling Errors Await Connection Configenv Load With Validation Before App Going Start Dotenv Create Methods One Validating Type Second Call Loaded Ask Things Varname Expectedtype Extract Value Value Constant Value Undefined Convertedvaluetype Throw Trim If Convertedvaluetype Throw Convertedvaluetype Unreachable Log Process Exit Console For Type Value Convertedvaluetype While Connecting Mongodb Log Errorobj Errorobj While Connecting Mongodb Configenv Value Type Configenv Configenv It's Overkill Not Much Effective Use It Validation All Fields Required Username Email Password Some Field Optonal Unlinking Unlink User Details From Full Request Object Fullrequestobject Fullrequestbody Fullrequestparams Fullqueryparams Logginguserschemadetails Userschema Userschema Methods Initializetimestampsmethod Console Requestobj Fullrequestobject Fullrequestbody Fullrequestparams Fullqueryparams Console Exacerbate Validation Things All Fields Required Field Trim Username Email Password Apierror Login User Collect Details Req Body Username Email Password Refreshtoken Accesstoken Validation Find User Account Redirect Flash Message Notify Send Access Refresh Tokens User Secure Cookies Redirect Homepage Flash Message Challenges Folder Structure Public Temp Store Avatar Cover Images Videos Maybe Temporary Basis Uplaaidng Them Db To Handle Private Prettier Npm Manager Efficiently Download Node Modules Each Time Project Store Links New Same Concept Redux Does State Management Connect Db Iife Import Mongoose Config Dbname Async Connect Process App Error Issue Configenv Method Validate Expectedtype Value String Before User Secret Methods Necessary Extract Generated Spdx-License-Identifier Sumit Saraswat Permission Hereby Granted Person Obtaining Copy Software Associated Documentation Files Deal Without Restriction Including Without Limitation Rights Use Copy Modify Merge Publish Distribute Sublicense Furnish Subject Following Conditions Copyright Notice Permission Included Substantial Portions Provided The Without Warranty Express Implied Kind Including But Limited Warranties Merchantability Fitness Particular Purpose Noninfringement Shall Liable Claim Damages Liability Whether Action Contract Tort Arising Connection With Shall Included

UPPERCASE:
PAGES FOLDER HOME SEARCH CART LAZY IMPORT CREATE ROUTES USING REACT-ROUTER-DOM USE SUSPENSE FROM REACT JUST LIKE SUSPENSE USED TO SHOW SOMETHING WHILE YOUR DATA IS FETCHING LOADER SKELON LOADING SYNTAX OF WRAP ALL YOUR ROUTES UNDER TAG CREATE A DON'T BE HASTY DASHBOARD BY COPY & PASTE DO IT WATCHING YOUR SELF HEADER COMPONENT USE SEMENTIC TAG NAV IMPORT LINK FASEARCH FASHOPPINGBAG FROM "REACT-ROUTER-DOM" "REACT-ICONS/FA" YOU CAN ALSO NAVLINK AFTER SPENDING 2 MINS READ DOCS CHAT-APP BACKEND CONTROLLERS CHATCONTROLLER.JS USERCONTROLLER.JS MODELS CHAT.JS USER.JS VIEWS FRONTEND ASSETS CHATCONTROLLER.JS USERCONTROLLER.JS COMPONENTS CHATMODEL.JS USERMODEL.JS PAGES CHATVIEW.JS USERVIEW.JS SERVICES API.JS INDEX.JS .GITIGNORE I AM LOOKING FOR THAT KIND OF STRUCTURE WHICH GIVES ME THESE FUNCTIONALITIES CAN HANDLE ALL MY SECRETS FROM 1 ENV FILE SHOULD BE ON THE ROOT LEVEL PROJECT ON ALSO DEFINE MY PRETTIER SO MY APPLY BOTH CODE FRONTED SERVER WANT 2 FOLDERS CLIENT MAINTAIN IT EASILY AND BEST PRACTISE TO ADD -D TAILWINDCSS POSTCSS AUTOPREFIXER DLX INIT -P PUBLIC TEMP MY-DP JPEG 1713770553755 426950296 APIERROR DEEP DIVE BELOW THROW NEW MESSAGE SOMETHING WENT WRONG WHILE REGISTERING THE USER USER.CONTROLLER.JS REGISTERUSER STACK TIP TIP THIRD PARTY SERVICES CLOUDINARY DATABASE CASE RUNNING BUT DB UNABLE TALK MULTER UPLOADING SOME FILES MULTER NOT RESPONDING STATUS CODE SERVICE UNAVAILABLE THIRD PARTY SERVICE RELY CURRENTLY DOWN BAD REQUEST CLIENT GIVES WRONG UNWANTED DATA REQUESTS FORBIDDEN SERVER UNDERSTANDS REQUEST MADE CLIENT REFUSES AUTHORIZE IT NOT ACCEPTABLE HAPPENS CAN'T PROVIDE WHAT REQUESTED FORMAT WANTED LIKE HTML VS JSON SERVER DB INDEX.JS HOW TO CONNECT TO CREATING FUNCTION CONTAIN CONNECTION LOGIC IT'S AN ASYNC USES TRY-CATCH HANDLING ERRORS AWAIT CONNECTION CONFIGENV LOAD WITH VALIDATION BEFORE APP GOING START DOTENV CREATE METHODS ONE VALIDATING TYPE SECOND CALL LOADED ASK THINGS VARNAME EXPECTEDTYPE EXTRACT VALUE VALUE CONSTANT VALUE UNDEFINED CONVERTEDVALUETYPE THROW TRIM IF CONVERTEDVALUETYPE THROW CONVERTEDVALUETYPE UNREACHABLE LOG PROCESS EXIT CONSOLE FOR TYPE VALUE CONVERTEDVALUETYPE WHILE CONNECTING MONGODB LOG ERROROBJ ERROROBJ WHILE CONNECTING MONGODB CONFIGENV VALUE TYPE CONFIGENV CONFIGENV IT'S OVERKILL NOT MUCH EFFECTIVE USE IT VALIDATION ALL FIELDS REQUIRED USERNAME EMAIL PASSWORD SOME FIELD OPTONAL UNLINKING UNLINK USER DETAILS FROM FULL REQUEST OBJECT FULLREQUESTOBJECT FULLREQUESTBODY FULLREQUESTPARAMS FULLQUERYPARAMS LOGGINGUSERSCHEMADETAILS USERSCHEMA USERSCHEMA METHODS INITIALIZETIMESTAMPSMETHOD CONSOLE REQUESTOBJ FULLREQUESTOBJECT FULLREQUESTBODY FULLREQUESTPARAMS FULLQUERYPARAMS CONSOLE EXACERBATE VALIDATION THINGS ALL FIELDS REQUIRED FIELD TRIM USERNAME EMAIL PASSWORD APIERROR LOGIN USER COLLECT DETAILS REQ BODY USERNAME EMAIL PASSWORD REFRESHTOKEN ACCESSTOKEN VALIDATION FIND USER ACCOUNT REDIRECT FLASH MESSAGE NOTIFY SEND ACCESS REFRESH TOKENS USER SECURE COOKIES REDIRECT HOMEPAGE FLASH MESSAGE CHALLENGES FOLDER STRUCTURE PUBLIC TEMP STORE AVATAR COVER IMAGES VIDEOS MAYBE TEMPORARY BASIS UPLAAIDNG THEM DB TO HANDLE PRIVATE PRETTIER NPM MANAGER EFFICIENTLY DOWNLOAD NODE MODULES EACH TIME PROJECT STORE LINKS NEW SAME CONCEPT REDUX DOES STATE MANAGEMENT CONNECT DB IIFE IMPORT MONGOOSE CONFIG DBNAME ASYNC CONNECT PROCESS APP ERROR ISSUE CONFIGENV METHOD VALIDATE EXPECTEDTYPE VALUE STRING BEFORE USER SECRET METHODS NECESSARY EXTRACT GENERATED SPDX-LICENSE-IDENTIFIER SUMIT SARASWAT PERMISSION HEREBY GRANTED PERSON OBTAINING COPY SOFTWARE ASSOCIATED DOCUMENTATION FILES DEAL WITHOUT RESTRICTION INCLUDING WITHOUT LIMITATION RIGHTS USE COPY MODIFY MERGE PUBLISH DISTRIBUTE SUBLICENSE FURNISH SUBJECT FOLLOWING CONDITIONS COPYRIGHT NOTICE PERMISSION INCLUDED SUBSTANTIAL PORTIONS PROVIDED THE WITHOUT WARRANTY EXPRESS IMPLIED KIND INCLUDING BUT LIMITED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE NONINFRINGEMENT SHALL LIABLE CLAIM DAMAGES LIABILITY WHETHER ACTION CONTRACT TORT ARISING CONNECTION WITH SHALL INCLUDED
---------------------------------------------

ARRAY-FORMAT:

LOWERCASE:
[
  "pages", "folder", "home", "search", "cart", "lazy", "import", "create", "routes", "using", "react-router-dom", "use", "suspense", "from", "react", "just", "like", "suspense", "used", "to", "show", "something", "while", "your", "data", "is", "fetching", "loader", "skelon", "loading", "syntax", "of", "wrap", "all", "your", "routes", "under", "tag", "create", "a", "don't", "be", "hasty", "dashboard", "by", "copy", "&", "paste", "do", "it", "watching", "your", "self", "header", "component", "use", "sementic", "tag", "nav", "import", "link", "fasearch", "fashoppingbag", "from", "react-router-dom", "react-icons/fa", "you", "can", "also", "navlink", "after", "spending", "mins", "read", "docs", "chat-app", "backend", "controllers", "chatcontroller.js", "usercontroller.js", "models", "chat.js", "user.js", "views", "frontend", "assets", "chatcontroller.js", "usercontroller.js", "components", "chatmodel.js", "usermodel.js", "pages", "chatview.js", "userview.js", "services", "api.js", "index.js", ".gitignore", "i", "am", "looking", "for", "that", "kind", "of", "structure", "which", "gives", "me", "these", "functionalities", "can", "handle", "all", "my", "secrets", "from", "env", "file", "should", "be", "on", "the", "root", "level", "project", "on", "also", "define", "my", "prettier", "so", "my", "apply", "both", "code", "fronted", "server", "want", "folders", "client", "maintain", "it", "easily", "and", "best", "practise", "to", "add", "-d", "tailwindcss", "postcss", "autoprefixer", "dlx", "init", "-p", "public", "temp", "my-dp", "jpeg", "apierror", "deep", "dive", "below", "throw", "new", "message", "something", "went", "wrong", "while", "registering", "the", "user", "user.controller.js", "registeruser", "stack", "tip", "tip", "third", "party", "services", "cloudinary", "database", "case", "running", "but", "db", "unable", "talk", "multer", "uploading", "some", "files", "multer", "not", "responding", "status", "code", "service", "unavailable", "third", "party", "service", "rely", "currently", "down", "bad", "request", "client", "gives", "wrong", "unwanted", "data", "requests", "forbidden", "server", "understands", "request", "made", "client", "refuses", "authorize", "it", "not", "acceptable", "happens", "can't", "provide", "what", "requested", "format", "wanted", "like", "html", "vs", "json", "server", "db", "index.js", "how", "to", "connect", "to", "creating", "function", "contain", "connection", "logic", "it's", "an", "async", "uses", "try-catch", "handling", "errors", "await", "connection", "configenv", "load", "with", "validation", "before", "app", "going", "start", "dotenv", "create", "methods", "one", "validating", "type", "second", "call", "loaded", "ask", "things", "varname", "expectedtype", "extract", "value", "value", "constant", "value", "undefined", "convertedvaluetype", "throw", "trim", "if", "convertedvaluetype", "throw", "convertedvaluetype", "unreachable", "log", "process", "exit", "console", "for", "type", "value", "convertedvaluetype", "while", "connecting", "mongodb", "log", "errorobj", "errorobj", "while", "connecting", "mongodb", "configenv", "value", "type", "configenv", "configenv", "it's", "overkill", "not", "much", "effective", "use", "it", "validation", "all", "fields", "required", "username", "email", "password", "some", "field", "optonal", "unlinking", "unlink", "user", "details", "from", "full", "request", "object", "fullrequestobject", "fullrequestbody", "fullrequestparams", "fullqueryparams", "logginguserschemadetails", "userschema", "userschema", "methods", "initializetimestampsmethod", "console", "requestobj", "fullrequestobject", "fullrequestbody", "fullrequestparams", "fullqueryparams", "console", "exacerbate", "validation", "things", "all", "fields", "required", "field", "trim", "username", "email", "password", "apierror", "login", "user", "collect", "details", "req", "body", "username", "email", "password", "refreshtoken", "accesstoken", "validation", "find", "user", "account", "redirect", "flash", "message", "notify", "send", "access", "refresh", "tokens", "user", "secure", "cookies", "redirect", "homepage", "flash", "message", "challenges", "folder", "structure", "public", "temp", "store", "avatar", "cover", "images", "videos", "maybe", "temporary", "basis", "uplaaidng", "them", "db", "to", "handle", "private", "prettier", "npm", "manager", "efficiently", "download", "node", "modules", "each", "time", "project", "store", "links", "new", "same", "concept", "redux", "does", "state", "management", "connect", "db", "iife", "import", "mongoose", "config", "dbname", "async", "connect", "process", "app", "error", "issue", "configenv", "method", "validate", "expectedtype", "value", "string", "before", "user", "secret", "methods", "necessary", "extract", "generated", "spdx-license-identifier", "sumit", "saraswat", "permission", "hereby", "granted", "person", "obtaining", "copy", "software", "associated", "documentation", "files", "deal", "without", "restriction", "including", "without", "limitation", "rights", "use", "copy", "modify", "merge", "publish", "distribute", "sublicense", "furnish", "subject", "following", "conditions", "copyright", "notice", "permission", "included", "substantial", "portions", "provided", "the", "without", "warranty", "express", "implied", "kind", "including", "but", "limited", "warranties", "merchantability", "fitness", "particular", "purpose", "noninfringement", "shall", "liable", "claim", "damages", "liability", "whether", "action", "contract", "tort", "arising", "connection", "with", "shall", "included"
]


CAPITALIZED:
[
  "Pages", "Folder", "Home", "Search", "Cart", "Lazy", "Import", "Create", "Routes", "Using", "React-router-dom", "Use", "Suspense", "From", "React", "Just", "Like", "Suspense", "Used", "To", "Show", "Something", "While", "Your", "Data", "Is", "Fetching", "Loader", "Skelon", "Loading", "Syntax", "Of", "Wrap", "All", "Your", "Routes", "Under", "Tag", "Create", "A", "Don't", "Be", "Hasty", "Dashboard", "By", "Copy", "&", "Paste", "Do", "It", "Watching", "Your", "Self", "Header", "Component", "Use", "Sementic", "Tag", "Nav", "Import", "Link", "Fasearch", "Fashoppingbag", "From", "React-router-dom", "React-icons/fa", "You", "Can", "Also", "Navlink", "After", "Spending", "Mins", "Read", "Docs", "Chat-app", "Backend", "Controllers", "Chatcontroller.js", "Usercontroller.js", "Models", "Chat.js", "User.js", "Views", "Frontend", "Assets", "Chatcontroller.js", "Usercontroller.js", "Components", "Chatmodel.js", "Usermodel.js", "Pages", "Chatview.js", "Userview.js", "Services", "Api.js", "Index.js", ".gitignore", "I", "Am", "Looking", "For", "That", "Kind", "Of", "Structure", "Which", "Gives", "Me", "These", "Functionalities", "Can", "Handle", "All", "My", "Secrets", "From", "Env", "File", "Should", "Be", "On", "The", "Root", "Level", "Project", "On", "Also", "Define", "My", "Prettier", "So", "My", "Apply", "Both", "Code", "Fronted", "Server", "Want", "Folders", "Client", "Maintain", "It", "Easily", "And", "Best", "Practise", "To", "Add", "-d", "Tailwindcss", "Postcss", "Autoprefixer", "Dlx", "Init", "-p", "Public", "Temp", "My-dp", "Jpeg", "Apierror", "Deep", "Dive", "Below", "Throw", "New", "Message", "Something", "Went", "Wrong", "While", "Registering", "The", "User", "User.controller.js", "Registeruser", "Stack", "Tip", "Tip", "Third", "Party", "Services", "Cloudinary", "Database", "Case", "Running", "But", "Db", "Unable", "Talk", "Multer", "Uploading", "Some", "Files", "Multer", "Not", "Responding", "Status", "Code", "Service", "Unavailable", "Third", "Party", "Service", "Rely", "Currently", "Down", "Bad", "Request", "Client", "Gives", "Wrong", "Unwanted", "Data", "Requests", "Forbidden", "Server", "Understands", "Request", "Made", "Client", "Refuses", "Authorize", "It", "Not", "Acceptable", "Happens", "Can't", "Provide", "What", "Requested", "Format", "Wanted", "Like", "Html", "Vs", "Json", "Server", "Db", "Index.js", "How", "To", "Connect", "To", "Creating", "Function", "Contain", "Connection", "Logic", "It's", "An", "Async", "Uses", "Try-catch", "Handling", "Errors", "Await", "Connection", "Configenv", "Load", "With", "Validation", "Before", "App", "Going", "Start", "Dotenv", "Create", "Methods", "One", "Validating", "Type", "Second", "Call", "Loaded", "Ask", "Things", "Varname", "Expectedtype", "Extract", "Value", "Value", "Constant", "Value", "Undefined", "Convertedvaluetype", "Throw", "Trim", "If", "Convertedvaluetype", "Throw", "Convertedvaluetype", "Unreachable", "Log", "Process", "Exit", "Console", "For", "Type", "Value", "Convertedvaluetype", "While", "Connecting", "Mongodb", "Log", "Errorobj", "Errorobj", "While", "Connecting", "Mongodb", "Configenv", "Value", "Type", "Configenv", "Configenv", "It's", "Overkill", "Not", "Much", "Effective", "Use", "It", "Validation", "All", "Fields", "Required", "Username", "Email", "Password", "Some", "Field", "Optonal", "Unlinking", "Unlink", "User", "Details", "From", "Full", "Request", "Object", "Fullrequestobject", "Fullrequestbody", "Fullrequestparams", "Fullqueryparams", "Logginguserschemadetails", "Userschema", "Userschema", "Methods", "Initializetimestampsmethod", "Console", "Requestobj", "Fullrequestobject", "Fullrequestbody", "Fullrequestparams", "Fullqueryparams", "Console", "Exacerbate", "Validation", "Things", "All", "Fields", "Required", "Field", "Trim", "Username", "Email", "Password", "Apierror", "Login", "User", "Collect", "Details", "Req", "Body", "Username", "Email", "Password", "Refreshtoken", "Accesstoken", "Validation", "Find", "User", "Account", "Redirect", "Flash", "Message", "Notify", "Send", "Access", "Refresh", "Tokens", "User", "Secure", "Cookies", "Redirect", "Homepage", "Flash", "Message", "Challenges", "Folder", "Structure", "Public", "Temp", "Store", "Avatar", "Cover", "Images", "Videos", "Maybe", "Temporary", "Basis", "Uplaaidng", "Them", "Db", "To", "Handle", "Private", "Prettier", "Npm", "Manager", "Efficiently", "Download", "Node", "Modules", "Each", "Time", "Project", "Store", "Links", "New", "Same", "Concept", "Redux", "Does", "State", "Management", "Connect", "Db", "Iife", "Import", "Mongoose", "Config", "Dbname", "Async", "Connect", "Process", "App", "Error", "Issue", "Configenv", "Method", "Validate", "Expectedtype", "Value", "String", "Before", "User", "Secret", "Methods", "Necessary", "Extract", "Generated", "Spdx-license-identifier", "Sumit", "Saraswat", "Permission", "Hereby", "Granted", "Person", "Obtaining", "Copy", "Software", "Associated", "Documentation", "Files", "Deal", "Without", "Restriction", "Including", "Without", "Limitation", "Rights", "Use", "Copy", "Modify", "Merge", "Publish", "Distribute", "Sublicense", "Furnish", "Subject", "Following", "Conditions", "Copyright", "Notice", "Permission", "Included", "Substantial", "Portions", "Provided", "The", "Without", "Warranty", "Express", "Implied", "Kind", "Including", "But", "Limited", "Warranties", "Merchantability", "Fitness", "Particular", "Purpose", "Noninfringement", "Shall", "Liable", "Claim", "Damages", "Liability", "Whether", "Action", "Contract", "Tort", "Arising", "Connection", "With", "Shall", "Included"
]


UPPERCASE:
[
  "PAGES", "FOLDER", "HOME", "SEARCH", "CART", "LAZY", "IMPORT", "CREATE", "ROUTES", "USING", "REACT-ROUTER-DOM", "USE", "SUSPENSE", "FROM", "REACT", "JUST", "LIKE", "SUSPENSE", "USED", "TO", "SHOW", "SOMETHING", "WHILE", "YOUR", "DATA", "IS", "FETCHING", "LOADER", "SKELON", "LOADING", "SYNTAX", "OF", "WRAP", "ALL", "YOUR", "ROUTES", "UNDER", "TAG", "CREATE", "A", "DON'T", "BE", "HASTY", "DASHBOARD", "BY", "COPY", "&", "PASTE", "DO", "IT", "WATCHING", "YOUR", "SELF", "HEADER", "COMPONENT", "USE", "SEMENTIC", "TAG", "NAV", "IMPORT", "LINK", "FASEARCH", "FASHOPPINGBAG", "FROM", "REACT-ROUTER-DOM", "REACT-ICONS/FA", "YOU", "CAN", "ALSO", "NAVLINK", "AFTER", "SPENDING", "MINS", "READ", "DOCS", "CHAT-APP", "BACKEND", "CONTROLLERS", "CHATCONTROLLER.JS", "USERCONTROLLER.JS", "MODELS", "CHAT.JS", "USER.JS", "VIEWS", "FRONTEND", "ASSETS", "CHATCONTROLLER.JS", "USERCONTROLLER.JS", "COMPONENTS", "CHATMODEL.JS", "USERMODEL.JS", "PAGES", "CHATVIEW.JS", "USERVIEW.JS", "SERVICES", "API.JS", "INDEX.JS", ".GITIGNORE", "I", "AM", "LOOKING", "FOR", "THAT", "KIND", "OF", "STRUCTURE", "WHICH", "GIVES", "ME", "THESE", "FUNCTIONALITIES", "CAN", "HANDLE", "ALL", "MY", "SECRETS", "FROM", "ENV", "FILE", "SHOULD", "BE", "ON", "THE", "ROOT", "LEVEL", "PROJECT", "ON", "ALSO", "DEFINE", "MY", "PRETTIER", "SO", "MY", "APPLY", "BOTH", "CODE", "FRONTED", "SERVER", "WANT", "FOLDERS", "CLIENT", "MAINTAIN", "IT", "EASILY", "AND", "BEST", "PRACTISE", "TO", "ADD", "-D", "TAILWINDCSS", "POSTCSS", "AUTOPREFIXER", "DLX", "INIT", "-P", "PUBLIC", "TEMP", "MY-DP", "JPEG", "APIERROR", "DEEP", "DIVE", "BELOW", "THROW", "NEW", "MESSAGE", "SOMETHING", "WENT", "WRONG", "WHILE", "REGISTERING", "THE", "USER", "USER.CONTROLLER.JS", "REGISTERUSER", "STACK", "TIP", "TIP", "THIRD", "PARTY", "SERVICES", "CLOUDINARY", "DATABASE", "CASE", "RUNNING", "BUT", "DB", "UNABLE", "TALK", "MULTER", "UPLOADING", "SOME", "FILES", "MULTER", "NOT", "RESPONDING", "STATUS", "CODE", "SERVICE", "UNAVAILABLE", "THIRD", "PARTY", "SERVICE", "RELY", "CURRENTLY", "DOWN", "BAD", "REQUEST", "CLIENT", "GIVES", "WRONG", "UNWANTED", "DATA", "REQUESTS", "FORBIDDEN", "SERVER", "UNDERSTANDS", "REQUEST", "MADE", "CLIENT", "REFUSES", "AUTHORIZE", "IT", "NOT", "ACCEPTABLE", "HAPPENS", "CAN'T", "PROVIDE", "WHAT", "REQUESTED", "FORMAT", "WANTED", "LIKE", "HTML", "VS", "JSON", "SERVER", "DB", "INDEX.JS", "HOW", "TO", "CONNECT", "TO", "CREATING", "FUNCTION", "CONTAIN", "CONNECTION", "LOGIC", "IT'S", "AN", "ASYNC", "USES", "TRY-CATCH", "HANDLING", "ERRORS", "AWAIT", "CONNECTION", "CONFIGENV", "LOAD", "WITH", "VALIDATION", "BEFORE", "APP", "GOING", "START", "DOTENV", "CREATE", "METHODS", "ONE", "VALIDATING", "TYPE", "SECOND", "CALL", "LOADED", "ASK", "THINGS", "VARNAME", "EXPECTEDTYPE", "EXTRACT", "VALUE", "VALUE", "CONSTANT", "VALUE", "UNDEFINED", "CONVERTEDVALUETYPE", "THROW", "TRIM", "IF", "CONVERTEDVALUETYPE", "THROW", "CONVERTEDVALUETYPE", "UNREACHABLE", "LOG", "PROCESS", "EXIT", "CONSOLE", "FOR", "TYPE", "VALUE", "CONVERTEDVALUETYPE", "WHILE", "CONNECTING", "MONGODB", "LOG", "ERROROBJ", "ERROROBJ", "WHILE", "CONNECTING", "MONGODB", "CONFIGENV", "VALUE", "TYPE", "CONFIGENV", "CONFIGENV", "IT'S", "OVERKILL", "NOT", "MUCH", "EFFECTIVE", "USE", "IT", "VALIDATION", "ALL", "FIELDS", "REQUIRED", "USERNAME", "EMAIL", "PASSWORD", "SOME", "FIELD", "OPTONAL", "UNLINKING", "UNLINK", "USER", "DETAILS", "FROM", "FULL", "REQUEST", "OBJECT", "FULLREQUESTOBJECT", "FULLREQUESTBODY", "FULLREQUESTPARAMS", "FULLQUERYPARAMS", "LOGGINGUSERSCHEMADETAILS", "USERSCHEMA", "USERSCHEMA", "METHODS", "INITIALIZETIMESTAMPDMETHOD", "CONSOLE", "REQUESTOBJ", "FULLREQUESTOBJECT", "FULLREQUESTBODY", "FULLREQUESTPARAMS", "FULLQUERYPARAMS", "CONSOLE", "EXACERBATE", "VALIDATION", "THINGS", "ALL", "FIELDS", "REQUIRED", "FIELD", "TRIM", "USERNAME", "EMAIL", "PASSWORD", "APIERROR", "LOGIN", "USER", "COLLECT", "DETAILS", "REQ", "BODY", "USERNAME", "EMAIL", "PASSWORD", "REFRESHTOKEN", "ACCESSTOKEN", "VALIDATION", "FIND", "USER", "ACCOUNT", "REDIRECT", "FLASH", "MESSAGE", "NOTIFY", "SEND", "ACCESS", "REFRESH", "TOKENS", "USER", "SECURE", "COOKIES", "REDIRECT", "HOMEPAGE", "FLASH", "MESSAGE", "CHALLENGES", "FOLDER", "STRUCTURE", "PUBLIC", "TEMP", "STORE", "AVATAR", "COVER", "IMAGES", "VIDEOS", "MAYBE", "TEMPORARY", "BASIS", "UPLAAIDNG", "THEM", "DB", "TO", "HANDLE", "PRIVATE", "PRETTIER", "NPM", "MANAGER", "EFFICIENTLY", "DOWNLOAD", "NODE", "MODULES", "EACH", "TIME", "PROJECT", "STORE", "LINKS", "NEW", "SAME", "CONCEPT", "REDUX", "DOES", "STATE", "MANAGEMENT", "CONNECT", "DB", "IIFE", "IMPORT", "MONGOOSE", "CONFIG", "DBNAME", "ASYNC", "CONNECT", "PROCESS", "APP", "ERROR", "ISSUE", "CONFIGENV", "METHOD", "VALIDATE", "EXPECTEDTYPE", "VALUE", "STRING", "BEFORE", "USER", "SECRET", "METHODS", "NECESSARY", "EXTRACT", "GENERATED", "SPDX-LICENSE-IDENTIFIER", "SUMIT", "SARASWAT", "PERMISSION", "HEREBY", "GRANTED", "PERSON", "OBTAINING", "COPY", "SOFTWARE", "ASSOCIATED", "DOCUMENTATION", "FILES", "DEAL", "WITHOUT", "RESTRICTION", "INCLUDING", "WITHOUT", "LIMITATION", "RIGHTS", "USE", "COPY", "MODIFY", "MERGE", "PUBLISH", "DISTRIBUTE", "SUBLICENSE", "FURNISH", "SUBJECT", "FOLLOWING", "CONDITIONS", "COPYRIGHT", "NOTICE", "PERMISSION", "INCLUDED", "SUBSTANTIAL", "PORTIONS", "PROVIDED", "THE", "WITHOUT", "WARRANTY", "EXPRESS", "IMPLIED", "KIND", "INCLUDING", "BUT", "LIMITED", "WARRANTIES", "MERCHANTABILITY", "FITNESS", "PARTICULAR", "PURPOSE", "NONINFRINGEMENT", "SHALL", "LIABLE", "CLAIM", "DAMAGES", "LIABILITY", "WHETHER", "ACTION", "CONTRACT", "TORT", "ARISING", "CONNECTION", "WITH", "SHALL", "INCLUDED"
]
